{"name":"Acomplish","tagline":"Blog built on CompoundJS","body":"a complish\r\n=================\r\n\r\n##Description  \r\n\r\nA ***COMP*** LISH\r\n\r\nYes, I know, *acomplish* is misspelled, but it is really a combination of:\r\n\r\n* __Comp__ ound.js\r\n* Pub __lish__\r\n* __accomplish__\r\n\r\n##Goals\r\n\r\n* Provide a working example of using CompoundJS as a Blog / CMS\r\n* Provide a Role-Based Management System for Posts, Users, and Comments\r\n* Provide a working example of using CompoundJS with PassportJS, and Google as a Provider\r\n* Provide a working example of using Compound with MySQL through JugglingDB\r\n* Provide working examples of making page views with multiple models, and balancing Async\r\nwith Synchronous functionality.\r\n* Provide a working example of using Unit Tests and Functional Tests (through Selenium, or a plugin TBD)\r\n* [Maybe] Provide a working example of using sockets (socket.io) for Realtime Web\r\n* [Maybe] Provide an example/workflow for dropping in Themes for your application \r\n\r\n##Comments\r\nThe Models only work with MySQL right now... see [this post](https://groups.google.com/forum/?fromgroups=#!topic/compoundjs/YxcIOKEqM8w).\r\nThis has to do with `__cachedRelations`... It's frustrating, if you know of an elegant solution, let me know.  \r\n\r\nAnother way of handling this is seeing: [http://book.mixu.net/ch7.html](http://book.mixu.net/ch7.html), particularly section\r\n7.2.1 Control flow pattern #1: Series. Mikito Takada has some really insightful documentation on the asynchronous nature of\r\nNode, and how we might solve this problem (or work nicely with this feature :-)).  \r\n\r\n*Update*: See method `getAssociated` the *application_controller* for a useful way or handling associations. Again, if you know of a more elegant solution, let me know.  \r\n\r\n##Components\r\n\r\n* [Compound.JS](http://compoundjs.com/) (formally known as Railway) is built on the [ExpressJS](http://expressjs.com/) framework.\r\n* Templates are using [ejs](https://github.com/visionmedia/ejs).\r\n* ORM is [Juggling DB](https://github.com/1602/jugglingdb).\r\n* This example is using [Twitter Bootstrap](http://twitter.github.com/bootstrap/) throughout, but not through a plugin.\r\n\r\n##Models\r\n\r\n(Currently):\r\n\r\n* __Posts__: { BelongsTo: [ Users ], HasMany: [ Comments ] }\r\n* __Comments__: { BelongsTo: [ Posts, Users ] }\r\n* __Users__: { HasMany: [ Comments, Posts ], HABTM: [ Roles (through Memberships) ] }\r\n* __Roles__: { HABTM: [ Users (through Memberships) ]}\r\n* __Memberships__: { BelongsTo: [ Posts, Roles ] }\r\n\r\nMaybe more to come, including __Photos__.\r\n\r\n##Install\r\n\r\n*TODO:* Add more instructions for how to configure a cloned app. \r\n\r\n1. Clone Repo  \r\n    `git clone [this repo url]`\r\n\r\n2. Install Modules  \r\n    `[sudo] npm install -l`\r\n\r\n3. Create DB (See DB Setup Below)  \r\n    `compound db migrate`\r\n\r\n4. Run Server  \r\n    `node server.js` *OR* `forever server.js`\r\n\r\n\r\nDB Setup (mysql)\r\n----------------\r\n\r\n\tmysql> CREATE DATABASE acomplish;\r\n\tmysql> GRANT ALL PRIVILEGES ON acomplish.* TO \"dbuser\"@\"localhost\" IDENTIFIED BY \"dbpasswd\";\r\n\tmysql> FLUSH PRIVILEGES; \r\n\tmysql> EXIT  \r\n\t  \r\n##Contribute\r\n\r\nLet me know if you would like to participate, or fork/pull. \r\n\r\n","google":"UA-39914231-1","note":"Don't delete this file! It's used internally to help with page regeneration."}